/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.raybia.dealer.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.raybia.dealer.model.NearestDealer;
import com.liferay.raybia.dealer.model.NearestDealerModel;
import com.liferay.raybia.dealer.model.NearestDealerSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the NearestDealer service. Represents a row in the &quot;Raybia_NearestDealer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NearestDealerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NearestDealerImpl}.
 * </p>
 *
 * @author Peter Richards
 * @see NearestDealerImpl
 * @generated
 */
@JSON(strict = true)
public class NearestDealerModelImpl
	extends BaseModelImpl<NearestDealer> implements NearestDealerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nearest dealer model instance should use the <code>NearestDealer</code> interface instead.
	 */
	public static final String TABLE_NAME = "Raybia_NearestDealer";

	public static final Object[][] TABLE_COLUMNS = {
		{"dealerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"name", Types.VARCHAR},
		{"street", Types.VARCHAR}, {"locality", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"postalCode", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"phoneNumber", Types.VARCHAR},
		{"openingHours", Types.VARCHAR}, {"latitude", Types.DECIMAL},
		{"longitude", Types.DECIMAL}, {"distance", Types.DECIMAL}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dealerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("openingHours", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("longitude", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("distance", Types.DECIMAL);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Raybia_NearestDealer (dealerId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name STRING null,street STRING null,locality STRING null,state_ STRING null,postalCode VARCHAR(75) null,emailAddress VARCHAR(75) null,phoneNumber VARCHAR(75) null,openingHours STRING null,latitude DECIMAL(30, 16) null,longitude DECIMAL(30, 16) null,distance DECIMAL(30, 16) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Raybia_NearestDealer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY nearestDealer.dealerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Raybia_NearestDealer.dealerId ASC";

	public static final String DATA_SOURCE = "noDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEALERID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static NearestDealer toModel(NearestDealerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NearestDealer model = new NearestDealerImpl();

		model.setDealerId(soapModel.getDealerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setStreet(soapModel.getStreet());
		model.setLocality(soapModel.getLocality());
		model.setState(soapModel.getState());
		model.setPostalCode(soapModel.getPostalCode());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setOpeningHours(soapModel.getOpeningHours());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setDistance(soapModel.getDistance());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<NearestDealer> toModels(NearestDealerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NearestDealer> models = new ArrayList<NearestDealer>(
			soapModels.length);

		for (NearestDealerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public NearestDealerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dealerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDealerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dealerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NearestDealer.class;
	}

	@Override
	public String getModelClassName() {
		return NearestDealer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<NearestDealer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<NearestDealer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NearestDealer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((NearestDealer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<NearestDealer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<NearestDealer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(NearestDealer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<NearestDealer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<NearestDealer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, NearestDealer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			NearestDealer.class.getClassLoader(), NearestDealer.class,
			ModelWrapper.class);

		try {
			Constructor<NearestDealer> constructor =
				(Constructor<NearestDealer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<NearestDealer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<NearestDealer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<NearestDealer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<NearestDealer, Object>>();
		Map<String, BiConsumer<NearestDealer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<NearestDealer, ?>>();

		attributeGetterFunctions.put("dealerId", NearestDealer::getDealerId);
		attributeSetterBiConsumers.put(
			"dealerId",
			(BiConsumer<NearestDealer, Long>)NearestDealer::setDealerId);
		attributeGetterFunctions.put("groupId", NearestDealer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<NearestDealer, Long>)NearestDealer::setGroupId);
		attributeGetterFunctions.put("companyId", NearestDealer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<NearestDealer, Long>)NearestDealer::setCompanyId);
		attributeGetterFunctions.put("userId", NearestDealer::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<NearestDealer, Long>)NearestDealer::setUserId);
		attributeGetterFunctions.put("userName", NearestDealer::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<NearestDealer, String>)NearestDealer::setUserName);
		attributeGetterFunctions.put(
			"createDate", NearestDealer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<NearestDealer, Date>)NearestDealer::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", NearestDealer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<NearestDealer, Date>)NearestDealer::setModifiedDate);
		attributeGetterFunctions.put("name", NearestDealer::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<NearestDealer, String>)NearestDealer::setName);
		attributeGetterFunctions.put("street", NearestDealer::getStreet);
		attributeSetterBiConsumers.put(
			"street",
			(BiConsumer<NearestDealer, String>)NearestDealer::setStreet);
		attributeGetterFunctions.put("locality", NearestDealer::getLocality);
		attributeSetterBiConsumers.put(
			"locality",
			(BiConsumer<NearestDealer, String>)NearestDealer::setLocality);
		attributeGetterFunctions.put("state", NearestDealer::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<NearestDealer, String>)NearestDealer::setState);
		attributeGetterFunctions.put(
			"postalCode", NearestDealer::getPostalCode);
		attributeSetterBiConsumers.put(
			"postalCode",
			(BiConsumer<NearestDealer, String>)NearestDealer::setPostalCode);
		attributeGetterFunctions.put(
			"emailAddress", NearestDealer::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<NearestDealer, String>)NearestDealer::setEmailAddress);
		attributeGetterFunctions.put(
			"phoneNumber", NearestDealer::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<NearestDealer, String>)NearestDealer::setPhoneNumber);
		attributeGetterFunctions.put(
			"openingHours", NearestDealer::getOpeningHours);
		attributeSetterBiConsumers.put(
			"openingHours",
			(BiConsumer<NearestDealer, String>)NearestDealer::setOpeningHours);
		attributeGetterFunctions.put("latitude", NearestDealer::getLatitude);
		attributeSetterBiConsumers.put(
			"latitude",
			(BiConsumer<NearestDealer, BigDecimal>)NearestDealer::setLatitude);
		attributeGetterFunctions.put("longitude", NearestDealer::getLongitude);
		attributeSetterBiConsumers.put(
			"longitude",
			(BiConsumer<NearestDealer, BigDecimal>)NearestDealer::setLongitude);
		attributeGetterFunctions.put("distance", NearestDealer::getDistance);
		attributeSetterBiConsumers.put(
			"distance",
			(BiConsumer<NearestDealer, BigDecimal>)NearestDealer::setDistance);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDealerId() {
		return _dealerId;
	}

	@Override
	public void setDealerId(long dealerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dealerId = dealerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return "";
		}
		else {
			return _street;
		}
	}

	@Override
	public String getStreet(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getStreet(languageId);
	}

	@Override
	public String getStreet(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getStreet(languageId, useDefault);
	}

	@Override
	public String getStreet(String languageId) {
		return LocalizationUtil.getLocalization(getStreet(), languageId);
	}

	@Override
	public String getStreet(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getStreet(), languageId, useDefault);
	}

	@Override
	public String getStreetCurrentLanguageId() {
		return _streetCurrentLanguageId;
	}

	@JSON
	@Override
	public String getStreetCurrentValue() {
		Locale locale = getLocale(_streetCurrentLanguageId);

		return getStreet(locale);
	}

	@Override
	public Map<Locale, String> getStreetMap() {
		return LocalizationUtil.getLocalizationMap(getStreet());
	}

	@Override
	public void setStreet(String street) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_street = street;
	}

	@Override
	public void setStreet(String street, Locale locale) {
		setStreet(street, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setStreet(String street, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(street)) {
			setStreet(
				LocalizationUtil.updateLocalization(
					getStreet(), "Street", street, languageId,
					defaultLanguageId));
		}
		else {
			setStreet(
				LocalizationUtil.removeLocalization(
					getStreet(), "Street", languageId));
		}
	}

	@Override
	public void setStreetCurrentLanguageId(String languageId) {
		_streetCurrentLanguageId = languageId;
	}

	@Override
	public void setStreetMap(Map<Locale, String> streetMap) {
		setStreetMap(streetMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setStreetMap(
		Map<Locale, String> streetMap, Locale defaultLocale) {

		if (streetMap == null) {
			return;
		}

		setStreet(
			LocalizationUtil.updateLocalization(
				streetMap, getStreet(), "Street",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getLocality() {
		if (_locality == null) {
			return "";
		}
		else {
			return _locality;
		}
	}

	@Override
	public String getLocality(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLocality(languageId);
	}

	@Override
	public String getLocality(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLocality(languageId, useDefault);
	}

	@Override
	public String getLocality(String languageId) {
		return LocalizationUtil.getLocalization(getLocality(), languageId);
	}

	@Override
	public String getLocality(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getLocality(), languageId, useDefault);
	}

	@Override
	public String getLocalityCurrentLanguageId() {
		return _localityCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLocalityCurrentValue() {
		Locale locale = getLocale(_localityCurrentLanguageId);

		return getLocality(locale);
	}

	@Override
	public Map<Locale, String> getLocalityMap() {
		return LocalizationUtil.getLocalizationMap(getLocality());
	}

	@Override
	public void setLocality(String locality) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_locality = locality;
	}

	@Override
	public void setLocality(String locality, Locale locale) {
		setLocality(locality, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLocality(
		String locality, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(locality)) {
			setLocality(
				LocalizationUtil.updateLocalization(
					getLocality(), "Locality", locality, languageId,
					defaultLanguageId));
		}
		else {
			setLocality(
				LocalizationUtil.removeLocalization(
					getLocality(), "Locality", languageId));
		}
	}

	@Override
	public void setLocalityCurrentLanguageId(String languageId) {
		_localityCurrentLanguageId = languageId;
	}

	@Override
	public void setLocalityMap(Map<Locale, String> localityMap) {
		setLocalityMap(localityMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLocalityMap(
		Map<Locale, String> localityMap, Locale defaultLocale) {

		if (localityMap == null) {
			return;
		}

		setLocality(
			LocalizationUtil.updateLocalization(
				localityMap, getLocality(), "Locality",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public String getState(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getState(languageId);
	}

	@Override
	public String getState(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getState(languageId, useDefault);
	}

	@Override
	public String getState(String languageId) {
		return LocalizationUtil.getLocalization(getState(), languageId);
	}

	@Override
	public String getState(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getState(), languageId, useDefault);
	}

	@Override
	public String getStateCurrentLanguageId() {
		return _stateCurrentLanguageId;
	}

	@JSON
	@Override
	public String getStateCurrentValue() {
		Locale locale = getLocale(_stateCurrentLanguageId);

		return getState(locale);
	}

	@Override
	public Map<Locale, String> getStateMap() {
		return LocalizationUtil.getLocalizationMap(getState());
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@Override
	public void setState(String state, Locale locale) {
		setState(state, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setState(String state, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(state)) {
			setState(
				LocalizationUtil.updateLocalization(
					getState(), "State", state, languageId, defaultLanguageId));
		}
		else {
			setState(
				LocalizationUtil.removeLocalization(
					getState(), "State", languageId));
		}
	}

	@Override
	public void setStateCurrentLanguageId(String languageId) {
		_stateCurrentLanguageId = languageId;
	}

	@Override
	public void setStateMap(Map<Locale, String> stateMap) {
		setStateMap(stateMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setStateMap(
		Map<Locale, String> stateMap, Locale defaultLocale) {

		if (stateMap == null) {
			return;
		}

		setState(
			LocalizationUtil.updateLocalization(
				stateMap, getState(), "State",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return "";
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postalCode = postalCode;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getOpeningHours() {
		if (_openingHours == null) {
			return "";
		}
		else {
			return _openingHours;
		}
	}

	@Override
	public String getOpeningHours(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOpeningHours(languageId);
	}

	@Override
	public String getOpeningHours(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOpeningHours(languageId, useDefault);
	}

	@Override
	public String getOpeningHours(String languageId) {
		return LocalizationUtil.getLocalization(getOpeningHours(), languageId);
	}

	@Override
	public String getOpeningHours(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getOpeningHours(), languageId, useDefault);
	}

	@Override
	public String getOpeningHoursCurrentLanguageId() {
		return _openingHoursCurrentLanguageId;
	}

	@JSON
	@Override
	public String getOpeningHoursCurrentValue() {
		Locale locale = getLocale(_openingHoursCurrentLanguageId);

		return getOpeningHours(locale);
	}

	@Override
	public Map<Locale, String> getOpeningHoursMap() {
		return LocalizationUtil.getLocalizationMap(getOpeningHours());
	}

	@Override
	public void setOpeningHours(String openingHours) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_openingHours = openingHours;
	}

	@Override
	public void setOpeningHours(String openingHours, Locale locale) {
		setOpeningHours(openingHours, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOpeningHours(
		String openingHours, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(openingHours)) {
			setOpeningHours(
				LocalizationUtil.updateLocalization(
					getOpeningHours(), "OpeningHours", openingHours, languageId,
					defaultLanguageId));
		}
		else {
			setOpeningHours(
				LocalizationUtil.removeLocalization(
					getOpeningHours(), "OpeningHours", languageId));
		}
	}

	@Override
	public void setOpeningHoursCurrentLanguageId(String languageId) {
		_openingHoursCurrentLanguageId = languageId;
	}

	@Override
	public void setOpeningHoursMap(Map<Locale, String> openingHoursMap) {
		setOpeningHoursMap(openingHoursMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setOpeningHoursMap(
		Map<Locale, String> openingHoursMap, Locale defaultLocale) {

		if (openingHoursMap == null) {
			return;
		}

		setOpeningHours(
			LocalizationUtil.updateLocalization(
				openingHoursMap, getOpeningHours(), "OpeningHours",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public BigDecimal getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(BigDecimal latitude) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_latitude = latitude;
	}

	@JSON
	@Override
	public BigDecimal getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(BigDecimal longitude) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_longitude = longitude;
	}

	@JSON
	@Override
	public BigDecimal getDistance() {
		return _distance;
	}

	@Override
	public void setDistance(BigDecimal distance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distance = distance;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), NearestDealer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> streetMap = getStreetMap();

		for (Map.Entry<Locale, String> entry : streetMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> localityMap = getLocalityMap();

		for (Map.Entry<Locale, String> entry : localityMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> stateMap = getStateMap();

		for (Map.Entry<Locale, String> entry : stateMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> openingHoursMap = getOpeningHoursMap();

		for (Map.Entry<Locale, String> entry : openingHoursMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			NearestDealer.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String street = getStreet(defaultLocale);

		if (Validator.isNull(street)) {
			setStreet(getStreet(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setStreet(getStreet(defaultLocale), defaultLocale, defaultLocale);
		}

		String locality = getLocality(defaultLocale);

		if (Validator.isNull(locality)) {
			setLocality(getLocality(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLocality(
				getLocality(defaultLocale), defaultLocale, defaultLocale);
		}

		String state = getState(defaultLocale);

		if (Validator.isNull(state)) {
			setState(getState(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setState(getState(defaultLocale), defaultLocale, defaultLocale);
		}

		String openingHours = getOpeningHours(defaultLocale);

		if (Validator.isNull(openingHours)) {
			setOpeningHours(
				getOpeningHours(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setOpeningHours(
				getOpeningHours(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public NearestDealer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, NearestDealer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NearestDealerImpl nearestDealerImpl = new NearestDealerImpl();

		nearestDealerImpl.setDealerId(getDealerId());
		nearestDealerImpl.setGroupId(getGroupId());
		nearestDealerImpl.setCompanyId(getCompanyId());
		nearestDealerImpl.setUserId(getUserId());
		nearestDealerImpl.setUserName(getUserName());
		nearestDealerImpl.setCreateDate(getCreateDate());
		nearestDealerImpl.setModifiedDate(getModifiedDate());
		nearestDealerImpl.setName(getName());
		nearestDealerImpl.setStreet(getStreet());
		nearestDealerImpl.setLocality(getLocality());
		nearestDealerImpl.setState(getState());
		nearestDealerImpl.setPostalCode(getPostalCode());
		nearestDealerImpl.setEmailAddress(getEmailAddress());
		nearestDealerImpl.setPhoneNumber(getPhoneNumber());
		nearestDealerImpl.setOpeningHours(getOpeningHours());
		nearestDealerImpl.setLatitude(getLatitude());
		nearestDealerImpl.setLongitude(getLongitude());
		nearestDealerImpl.setDistance(getDistance());

		nearestDealerImpl.resetOriginalValues();

		return nearestDealerImpl;
	}

	@Override
	public NearestDealer cloneWithOriginalValues() {
		NearestDealerImpl nearestDealerImpl = new NearestDealerImpl();

		nearestDealerImpl.setDealerId(
			this.<Long>getColumnOriginalValue("dealerId"));
		nearestDealerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		nearestDealerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		nearestDealerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		nearestDealerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		nearestDealerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		nearestDealerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		nearestDealerImpl.setName(this.<String>getColumnOriginalValue("name"));
		nearestDealerImpl.setStreet(
			this.<String>getColumnOriginalValue("street"));
		nearestDealerImpl.setLocality(
			this.<String>getColumnOriginalValue("locality"));
		nearestDealerImpl.setState(
			this.<String>getColumnOriginalValue("state_"));
		nearestDealerImpl.setPostalCode(
			this.<String>getColumnOriginalValue("postalCode"));
		nearestDealerImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		nearestDealerImpl.setPhoneNumber(
			this.<String>getColumnOriginalValue("phoneNumber"));
		nearestDealerImpl.setOpeningHours(
			this.<String>getColumnOriginalValue("openingHours"));
		nearestDealerImpl.setLatitude(
			this.<BigDecimal>getColumnOriginalValue("latitude"));
		nearestDealerImpl.setLongitude(
			this.<BigDecimal>getColumnOriginalValue("longitude"));
		nearestDealerImpl.setDistance(
			this.<BigDecimal>getColumnOriginalValue("distance"));

		return nearestDealerImpl;
	}

	@Override
	public int compareTo(NearestDealer nearestDealer) {
		long primaryKey = nearestDealer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof NearestDealer)) {
			return false;
		}

		NearestDealer nearestDealer = (NearestDealer)object;

		long primaryKey = nearestDealer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<NearestDealer> toCacheModel() {
		NearestDealerCacheModel nearestDealerCacheModel =
			new NearestDealerCacheModel();

		nearestDealerCacheModel.dealerId = getDealerId();

		nearestDealerCacheModel.groupId = getGroupId();

		nearestDealerCacheModel.companyId = getCompanyId();

		nearestDealerCacheModel.userId = getUserId();

		nearestDealerCacheModel.userName = getUserName();

		String userName = nearestDealerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			nearestDealerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			nearestDealerCacheModel.createDate = createDate.getTime();
		}
		else {
			nearestDealerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			nearestDealerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			nearestDealerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		nearestDealerCacheModel.name = getName();

		String name = nearestDealerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			nearestDealerCacheModel.name = null;
		}

		nearestDealerCacheModel.street = getStreet();

		String street = nearestDealerCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			nearestDealerCacheModel.street = null;
		}

		nearestDealerCacheModel.locality = getLocality();

		String locality = nearestDealerCacheModel.locality;

		if ((locality != null) && (locality.length() == 0)) {
			nearestDealerCacheModel.locality = null;
		}

		nearestDealerCacheModel.state = getState();

		String state = nearestDealerCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			nearestDealerCacheModel.state = null;
		}

		nearestDealerCacheModel.postalCode = getPostalCode();

		String postalCode = nearestDealerCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			nearestDealerCacheModel.postalCode = null;
		}

		nearestDealerCacheModel.emailAddress = getEmailAddress();

		String emailAddress = nearestDealerCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			nearestDealerCacheModel.emailAddress = null;
		}

		nearestDealerCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = nearestDealerCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			nearestDealerCacheModel.phoneNumber = null;
		}

		nearestDealerCacheModel.openingHours = getOpeningHours();

		String openingHours = nearestDealerCacheModel.openingHours;

		if ((openingHours != null) && (openingHours.length() == 0)) {
			nearestDealerCacheModel.openingHours = null;
		}

		nearestDealerCacheModel.latitude = getLatitude();

		nearestDealerCacheModel.longitude = getLongitude();

		nearestDealerCacheModel.distance = getDistance();

		return nearestDealerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<NearestDealer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<NearestDealer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NearestDealer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((NearestDealer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<NearestDealer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<NearestDealer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<NearestDealer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((NearestDealer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, NearestDealer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _dealerId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _street;
	private String _streetCurrentLanguageId;
	private String _locality;
	private String _localityCurrentLanguageId;
	private String _state;
	private String _stateCurrentLanguageId;
	private String _postalCode;
	private String _emailAddress;
	private String _phoneNumber;
	private String _openingHours;
	private String _openingHoursCurrentLanguageId;
	private BigDecimal _latitude;
	private BigDecimal _longitude;
	private BigDecimal _distance;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<NearestDealer, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((NearestDealer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("dealerId", _dealerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("street", _street);
		_columnOriginalValues.put("locality", _locality);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("postalCode", _postalCode);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("phoneNumber", _phoneNumber);
		_columnOriginalValues.put("openingHours", _openingHours);
		_columnOriginalValues.put("latitude", _latitude);
		_columnOriginalValues.put("longitude", _longitude);
		_columnOriginalValues.put("distance", _distance);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("dealerId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("name", 128L);

		columnBitmasks.put("street", 256L);

		columnBitmasks.put("locality", 512L);

		columnBitmasks.put("state_", 1024L);

		columnBitmasks.put("postalCode", 2048L);

		columnBitmasks.put("emailAddress", 4096L);

		columnBitmasks.put("phoneNumber", 8192L);

		columnBitmasks.put("openingHours", 16384L);

		columnBitmasks.put("latitude", 32768L);

		columnBitmasks.put("longitude", 65536L);

		columnBitmasks.put("distance", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private NearestDealer _escapedModel;

}